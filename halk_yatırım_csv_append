def halk_func():
    print('Halk Yatırım')
    from pdfminer.pdfinterp import PDFResourceManager, PDFPageInterpreter
    from pdfminer.pdfpage import PDFPage
    from pdfminer.converter import TextConverter
    from pdfminer.layout import LAParams
    import io
    import re
    import requests as req
    import pandas as pd
    from selenium import webdriver
    import datetime
    import requests
    import json
    print('Modules imported')

    # GETTING PDF AS TEXT
    def download_pdf(url):
        local_filename = f"C:/Users/berat/Desktop/Ulakfin - Ortak Data/PDFs/Halk_yatırım/{url.split('/')[-1]}"

        with req.get(url) as r:
            with open(local_filename, 'wb') as f:
                f.write(r.content)

        return local_filename

    slack_token = 'xoxb-1310569939731-1373479534900-EAQbiKWSTqT0TxoJI7EfM5TP'
    slack_channel = '#csv'
    slack_icon_url = 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTuGqps7ZafuzUsViFGIremEL2a3NR0KO0s0RTCMXmzmREJd5m4MA&s'
    slack_user_name = 'informer'
    def post_message_to_slack(text, blocks=None):
        return requests.post('https://slack.com/api/chat.postMessage', {
            'token': slack_token,
            'channel': slack_channel,
            'text': text,
            'icon_url': slack_icon_url,
            'username': slack_user_name,
            'blocks': json.dumps(blocks) if blocks else None
        }).json()

    def convert_list_to_string(org_list, seperator=' '):
        return seperator.join(org_list)

    option = webdriver.ChromeOptions()
    option.add_argument("--incognito")
    driver = webdriver.Chrome(executable_path='C:/Users/berat/webdriver/chromedriver', options=option)      ###
    print('Webdriver is set.')
    click_xpath = "//main/div[1]/div/main/div[2]/div[2]/div[1]/div/div[2]/a"
    print('Getting to the daily news page.')
    driver.get("https://www.halkyatirim.com.tr/piyasa-haberleri")
    link = 'https://www.halkyatirim.com.tr/piyasa-haberleri'
    print(f'Current webpage : {link}')
    driver.find_element_by_xpath(click_xpath).click()
    driver.switch_to.window(driver.window_handles[-1])
    halk_url = driver.current_url
    link = halk_url
    print(f'Current webpage : {link}')
    print('Downloading PDF')
    halk = download_pdf(halk_url)
    print('PDF is downloaded')

    post_message_to_slack(f"-{halk_url}")
    def pdf_to_text(path):
        manager = PDFResourceManager()
        retstr = io.StringIO()
        layout = LAParams(all_texts=True)
        device = TextConverter(manager, retstr, laparams=layout)
        filepath = open(path, 'rb')
        interpreter = PDFPageInterpreter(manager, device)
        for page in PDFPage.get_pages(filepath, check_extractable=False):
            interpreter.process_page(page)
        text = retstr.getvalue()
        filepath.close()
        device.close()
        retstr.close()
        return text

    pdf_file = halk
    print('Setting the boundaries between Skor  Kart and Şirket Haberleri')
    sirket_haberleri_pattern = '(?<=Şirket Haberleri).*?(?=Skor  Kart:)'
    text_list = []
    sirket_haber_list_1 =[]
    text_list.append(pdf_to_text(pdf_file))
    for text in text_list:
        sirket_haber_list_1.append(re.findall(sirket_haberleri_pattern, text, re.DOTALL))

    hisseler = []
    haberler = []
    tarih = []
    bulten = []
    today = datetime.datetime.now().date()
    news_id = []

    for k in sirket_haber_list_1:
        whole_text = convert_list_to_string(k)

    print('Cleaning the data')
    para_list = whole_text.split('Skor kart için tıklayınız.')

    for para in para_list:
        if para.find('):') != -1:
            hisse_al = para.split('):', maxsplit=1)[0]
            haber_ekle = para.split('):', maxsplit=1)[1]
            for hisse in hisse_al.split():
                if hisse.isupper() and hisse.find('(') != -1:
                    hisseler.append(hisse[1:-1])
                    tarih.append(today)
                    haberler.append(haber_ekle)
                    bulten.append("Halk")
                    c = 0
                    news_id.append(c)
                    c = c + 1
    news1 = []
    for i in range(0, len(haberler)):
        news_pr = haberler[i].split('\n')
        news_pr_strip = []
        for k in range(0, len(news_pr)):
            news_pr_strip.append(news_pr[k].strip())
        news1.append(" ".join(news_pr_strip))
    haberler = news1

    timestamp = []
    for q in hisseler:
        timestamp.append(datetime.datetime.today().now().time())

    link = []
    for h in hisseler:
        link.append(driver.current_url)

    #CREATING DATAFRAME
    hisseler_df = pd.DataFrame(columns=['codes'], data=hisseler)
    haberler_df = pd.DataFrame(columns=['news'], data=haberler)
    tarih_df = pd.DataFrame(columns=['date_list'], data=tarih)
    bulten_df = pd.DataFrame(columns=['araci_kurum'], data=bulten)
    timestamp_df = pd.DataFrame(columns=['timestamp'], data=timestamp)
    stored_df = pd.concat([tarih_df, hisseler_df, haberler_df, bulten_df, timestamp_df], axis=1)

    print('Writing the daily data to csv')
    date_list = tarih
    codes = []
    for row in hisseler:
        codes.append(row.strip())
    news = haberler
    araci_kurum = bulten
    df = pd.DataFrame(list(zip(date_list, codes, news, araci_kurum, timestamp, link)))
    df.columns = ['date_list', 'codes', 'news', 'araci_kurum', 'timestamp', 'link']

    first_row_count = df.shape[0]
    # Hisse Sembolü kontrolü
    df = df.rename(columns={'codes': 'ISLEM  KODU'})
    df['ISLEM  KODU'] = df['ISLEM  KODU'].astype(str) + '.E'
    df_bist = pd.read_csv('C:/Users/berat/Desktop/Ulakfin - Ortak Data/slack_csv/hissesembolu.csv', delimiter=';')
    df = pd.merge(df, df_bist, on=["ISLEM  KODU"])
    df = df[['date_list', 'ISLEM  KODU', 'news', 'araci_kurum', 'timestamp', 'link']]

    codes2 = []
    for i in range(0, len(df['ISLEM  KODU'])):
        codes2.append(df['ISLEM  KODU'][i].split('.E')[0])

    df['ISLEM  KODU'] = codes2
    df = df.rename(columns={'ISLEM  KODU': 'codes'})
    second_row_count = df.shape[0]

    # ID Number yazdırma
    old_df = pd.read_csv("C:/Users/berat/Desktop/Ulakfin - Ortak Data/DATA_SON/sirket_haberleri.csv")
    last_id = old_df['news_id'].iloc[-1]
    df['news_id'] = range(last_id + 1, last_id + 1 + len(df))
    df = df[['news_id', 'date_list', 'codes', 'news', 'araci_kurum', 'timestamp', 'link']]

    print(f"{second_row_count} news passed the Stock Name Test from total of {first_row_count} news.")
    post_message_to_slack(
        f"*Accuracy:* {second_row_count} news parsed, out of {first_row_count} news scrapped.")

    print(df)
    df.to_csv("C:/Users/berat/Desktop/Ulakfin - Ortak Data/DATA_SON/sirket_haberleri.csv", encoding="utf-8",
              index=False, header=False, mode='a')
    print('Halk Yatırım is completed')
    return stored_df
