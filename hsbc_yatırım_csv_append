def hsbc_func():
    import requests as req
    from datetime import date
    import pandas as pd
    from selenium import webdriver
    import time
    from pdfminer.pdfinterp import PDFResourceManager, PDFPageInterpreter
    from pdfminer.pdfpage import PDFPage
    from pdfminer.converter import TextConverter
    from pdfminer.layout import LAParams
    import io
    import re
    import datetime
    import csv
    from selenium.common.exceptions import NoSuchElementException
    import sys

    #GETTING PDF AS TEXT
    def download_pdf(url):
        local_filename = url.split('/')[-1]

        with req.get(url) as r:
            with open(local_filename, 'wb') as f:
                f.write(r.content)

        return  local_filename

    def pdf_to_text(path):
        manager = PDFResourceManager()
        retstr = io.StringIO()
        layout = LAParams(all_texts=True)
        device = TextConverter(manager, retstr, laparams=layout)
        filepath = open(path, 'rb')
        interpreter = PDFPageInterpreter(manager, device)
        for page in PDFPage.get_pages(filepath, check_extractable=False):
            interpreter.process_page(page)
        text = retstr.getvalue()
        filepath.close()
        device.close()
        retstr.close()
        return text

    ay = date.today().strftime("%B")
    today = date.today().strftime('%d.%m.%Y')

    months_xpath = {
        "January": "//span/span/span[2]/ul/li[1]",
        "February": "//span/span/span[2]/ul/li[2]",
        "March": "//span/span/span[2]/ul/li[3]",
        "April": "//span/span/span[2]/ul/li[4]",
        "May": "//span/span/span[2]/ul/li[5]",
        "June": "//span/span/span[2]/ul/li[6]",
        "July": "//span/span/span[2]/ul/li[7]",
        "August": "//span/span/span[2]/ul/li[8]",
        "September": "//span/span/span[2]/ul/li[9]",
        "October": "//span/span/span[2]/ul/li[10]",
        "November": "//span/span/span[2]/ul/li[11]",
        "December": "//span/span/span[2]/ul/li[12]"
    }

    option = webdriver.ChromeOptions()
    option.add_argument("--incognito")
    driver = webdriver.Chrome(executable_path='C:/Users/berat/webdriver/chromedriver', options=option)
    driver.get("http://www.hsbcyatirim.com.tr/hizmetlerimiz/arastirma/arastirma")
    driver.find_element_by_xpath("//*[@id='select2-ddlMonth-container']").click()
    month_xpath = months_xpath.get(f"{ay}")
    driver.find_element_by_xpath(month_xpath).click()
    driver.find_element_by_xpath("//*[@id='GetFundProfit']").click()
    time.sleep(3)
    try:
        for c in range(1,25):
            tarih_xpath = f'//*[@id="ContentSection"]/div[2]/div/div[3]/div[2]/table/tbody/tr[{c}]/td[2]'
            element = driver.find_element_by_xpath(tarih_xpath)
            if element.text == today:
                driver.find_element_by_xpath(
                    f'//*[@id="ContentSection"]/div[2]/div/div[3]/div[2]/table/tbody/tr[{c}]/td[1]/a').click()
                break

        driver.switch_to.window(driver.window_handles[-1])
        hsbc_url = driver.current_url
        hsbc = download_pdf(hsbc_url)

        pdf_file = f"C:/Users/berat/Desktop/Ulakfin - Ortak Data/{hsbc}"
        sirket_haberleri_pattern = '(?<=Şirket Haberleri).*?(?=Doküman  HSBC  Yatırım  Menkul  Değerler)'
        text_list = []
        sirket_haber_list_1 =[]
        text_list.append(pdf_to_text(pdf_file))
        for text in text_list:
            sirket_haber_list_1.append(re.findall(sirket_haberleri_pattern, text, re.DOTALL))

        for element in sirket_haber_list_1:
            for element2 in element:
                text = element2

        lines = text.splitlines()
        haberler=[]
        hisseler=[]
        tarih=[]
        bulten=[]

        for line in lines:
            if line.isupper():
                hisseler.append(line)
                tarih.append(today)
                bulten.append('HSBC')
            elif line!=' ' and len(hisseler)==len(haberler):
                haberler[-1] = haberler[-1] + line
            elif line!=' ' and len(hisseler)>len(haberler):
                haberler.append(line)

        timestamp = []
        news_id = []
        for q in hisseler:
            timestamp.append(datetime.datetime.today().now().time())
            c = 0
            news_id.append(c)
            c = c + 1

        news1 = []
        for i in range(0, len(haberler)):
            news_pr = haberler[i].split('\n')
            news_pr_strip = []
            for k in range(0, len(news_pr)):
                news_pr_strip.append(news_pr[k].strip())
            news1.append(" ".join(news_pr_strip))
        haberler = news1

        hisseler_df = pd.DataFrame(columns=[''], data=hisseler)
        haberler_df = pd.DataFrame(columns=[''], data=haberler)
        tarih_df = pd.DataFrame(columns=[''], data=tarih)
        bulten_df = pd.DataFrame(columns=[''], data=bulten)
        timestamp_df = pd.DataFrame(columns=[''], data=timestamp)
        stored_df = pd.concat([tarih_df, hisseler_df, haberler_df, bulten_df, timestamp_df], axis=1)

        data = pd.read_csv('C:/Users/berat/Desktop/Ulakfin - Ortak Data/DATA_SON/sirket_haberleri.csv')
        last_row = len(data)
        with open('C:/Users/berat/Desktop/Ulakfin - Ortak Data/DATA_SON/sirket_haberleri.csv', 'a', encoding='utf-8', newline="") as fp:
            wr = csv.writer(fp)
            for i in range(0, len(hisseler)):
                csv_list = [last_row, tarih[i], hisseler[i], haberler[i], bulten[i], timestamp[i]]
                print(csv_list)
                last_row = last_row + 1
                wr.writerow(csv_list)
        return stored_df

    except NoSuchElementException:
        print("Bülten bulunamadı.")
